#BlueJ class context
comment0.target=HuffmanCoding
comment0.text=\n\ This\ class\ contains\ methods\ which,\ when\ used\ together,\ perform\ the\n\ entire\ Huffman\ Coding\ encoding\ and\ decoding\ process\n\ \n\ @author\ Ishaan\ Ivaturi\n\ @author\ Prince\ Rawal\n
comment1.params=f
comment1.target=HuffmanCoding(java.lang.String)
comment1.text=\n\ Constructor\ used\ by\ the\ driver,\ sets\ filename\n\ DO\ NOT\ EDIT\ \n\ @param\ f\ The\ file\ we\ want\ to\ encode\n
comment10.params=
comment10.target=java.lang.String\ getFileName()
comment10.text=\n\ Getters\ used\ by\ the\ driver.\ \n\ DO\ NOT\ EDIT\ or\ REMOVE\n
comment11.params=
comment11.target=java.util.ArrayList\ getSortedCharFreqList()
comment12.params=
comment12.target=TreeNode\ getHuffmanRoot()
comment13.params=
comment13.target=java.lang.String[]\ getEncodings()
comment2.params=
comment2.target=void\ makeSortedList()
comment2.text=\n\ Reads\ from\ filename\ character\ by\ character,\ and\ sets\ sortedCharFreqList\n\ to\ a\ new\ ArrayList\ of\ CharFreq\ objects\ with\ frequency\ >\ 0,\ sorted\ by\ frequency\n
comment3.params=
comment3.target=void\ makeTree()
comment3.text=\n\ Uses\ sortedCharFreqList\ to\ build\ a\ huffman\ coding\ tree,\ and\ stores\ its\ root\n\ in\ huffmanRoot\ \n
comment4.params=parent\ str
comment4.target=void\ traverse(TreeNode,\ java.lang.String)
comment5.params=
comment5.target=void\ makeEncodings()
comment5.text=\n\ Uses\ huffmanRoot\ to\ create\ a\ string\ array\ of\ size\ 128,\ where\ each\n\ index\ in\ the\ array\ contains\ that\ ASCII\ character's\ bitstring\ encoding.\ Characters\ not\n\ present\ in\ the\ huffman\ coding\ tree\ should\ have\ their\ spots\ in\ the\ array\ left\ null.\n\ Set\ encodings\ to\ this\ array.\n
comment6.params=encodedFile
comment6.target=void\ encode(java.lang.String)
comment6.text=\n\ Using\ encodings\ and\ filename,\ this\ method\ makes\ use\ of\ the\ writeBitString\ method\n\ to\ write\ the\ final\ encoding\ of\ 1's\ and\ 0's\ to\ the\ encoded\ file.\n\ \n\ @param\ encodedFile\ The\ file\ name\ into\ which\ the\ text\ file\ is\ to\ be\ encoded\n
comment7.params=filename\ bitString
comment7.target=void\ writeBitString(java.lang.String,\ java.lang.String)
comment7.text=\n\ Writes\ a\ given\ string\ of\ 1's\ and\ 0's\ to\ the\ given\ file\ byte\ by\ byte\n\ and\ NOT\ as\ characters\ of\ 1\ and\ 0\ which\ take\ up\ 8\ bits\ each\n\ DO\ NOT\ EDIT\n\ \n\ @param\ filename\ The\ file\ to\ write\ to\ (doesn't\ need\ to\ exist\ yet)\n\ @param\ bitString\ The\ string\ of\ 1's\ and\ 0's\ to\ write\ to\ the\ file\ in\ bits\n
comment8.params=encodedFile\ decodedFile
comment8.target=void\ decode(java.lang.String,\ java.lang.String)
comment8.text=\n\ Using\ a\ given\ encoded\ file\ name,\ this\ method\ makes\ use\ of\ the\ readBitString\ method\ \n\ to\ convert\ the\ file\ into\ a\ bit\ string,\ then\ decodes\ the\ bit\ string\ using\ the\ \n\ tree,\ and\ writes\ it\ to\ a\ decoded\ file.\ \n\ \n\ @param\ encodedFile\ The\ file\ which\ has\ already\ been\ encoded\ by\ encode()\n\ @param\ decodedFile\ The\ name\ of\ the\ new\ file\ we\ want\ to\ decode\ into\n
comment9.params=filename
comment9.target=java.lang.String\ readBitString(java.lang.String)
comment9.text=\n\ Reads\ a\ given\ file\ byte\ by\ byte,\ and\ returns\ a\ string\ of\ 1's\ and\ 0's\n\ representing\ the\ bits\ in\ the\ file\n\ DO\ NOT\ EDIT\n\ \n\ @param\ filename\ The\ encoded\ file\ to\ read\ from\n\ @return\ String\ of\ 1's\ and\ 0's\ representing\ the\ bits\ in\ the\ file\n
numComments=14
